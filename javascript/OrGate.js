var OrGate = (function (_super) {
	__extends(OrGate, _super);
    function OrGate() {
		_super.call(this);		
		this.makeBezierCurve();
    }    
	// Returns a string with a description of the type of gate
	OrGate.prototype.getType = function(){
		return "OR";
	}	
	// Makes the Bezier curve that utilises my algorithm to draw a quadratic Curve
	OrGate.prototype.makeBezierCurve = function(){
		var anchorPoint1 = new Vector(0, -40);
		var controlPoint = new Vector(-50, -10);
		var anchorPoint2 = new Vector(-50, 40);
		this.leftBezierCurve = new QuadraticBezierCurve( new Array(anchorPoint1, controlPoint, anchorPoint2), 30);		
	};
	// The draw function for the or gate
	OrGate.prototype.draw = function (context) {
		context.save();		
						
		// Begins the path, sets the line width and colour
		context.beginPath();		
		context.lineWidth = lineWidth;		
		context.strokeStyle = nodeLineColour;
		// Moves to the start point of the drawing
		context.moveTo(0,-50);
		// Draws the line at the top
		context.lineTo(0, -40);
		context.stroke();
		
		// draws the left side of the gate using the points generated by my algorithm
		this.leftBezierCurve.draw(context);
		// Flip the context in the y axis to draw the right hand side of the gate
		context.save();
		context.scale(-1,1);
		this.leftBezierCurve.draw(context);	
		context.restore();
		
		context.beginPath();
		context.moveTo(-50, 40);
		context.quadraticCurveTo(0, 20, 50, 40); // This uses the built in function.
		
		// Draw the bottom connecting line.
		context.moveTo(0, 30);
		context.lineTo(0, 50);
		context.stroke();
		context.restore();
		
		this.drawChildren(context);		
    };    
	
    return OrGate;
})(FaultTreeGate);
